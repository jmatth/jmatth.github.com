<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dotfiles | Josh Matthews]]></title>
  <link href="http://jmatth.com/blog/categories/dotfiles/atom.xml" rel="self"/>
  <link href="http://jmatth.com/"/>
  <updated>2018-05-03T12:13:00-04:00</updated>
  <id>http://jmatth.com/</id>
  <author>
    <name><![CDATA[Josh Matthews]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Solarized++]]></title>
    <link href="http://jmatth.com/blog/2014/06/15/solarized-plus-plus/"/>
    <updated>2014-06-15T10:28:07-07:00</updated>
    <id>http://jmatth.com/blog/2014/06/15/solarized-plus-plus</id>
    <content type="html"><![CDATA[<p>A long time ago, I ran across <a href="http://ethanschoonover.com/solarized">Solarized</a>,
a very popular colorscheme for the terminal and most text editors. While my
first reaction was something along the lines of &ldquo;Eww, blue background?&rdquo;, I
eventually gave it a try because of how highly recommend it was.  In less than a
week it became my favorite color scheme because of how easy on the eyes it is
and how well the syntax highlighting fits together (both results of the scheme&rsquo;s
<a href="http://ethanschoonover.com/solarized#features">careful design</a>).  After using
the theme for some time though, I ran into a couple problems with it. One was
actually a well known bug that made some text unreadable, and the other was just
something I thought could be made easier. I&rsquo;m writing about my fixes for both
problems here so that others who have the same problems can solve them faster in
the future.</p>

<!-- MORE -->


<h2>1. The &ldquo;Bright Black&rdquo; Terminal Color Is Invisible</h2>

<p><div class="img-wrapper flex-content basic-alignment right">
<img src="/downloads/pictures/solarized_problems.png" title="&lsquo;This is not what the output should look like.&rsquo; &lsquo;Bright black text invisible in solarized.&rsquo;" >
<p>&lsquo;This is not what the output should look like.&rsquo; &lsquo;Bright black text invisible in solarized.&rsquo;</p>
</div>
This is a long standing issue that has been
<a href="https://github.com/visionmedia/express/issues/1700">extensively</a>
<a href="https://github.com/gruntjs/grunt/issues/181">documented</a>
<a href="https://github.com/altercation/solarized/issues/220">on</a>
<a href="https://github.com/visionmedia/mocha/issues/802">github</a>.  When designing
Solarized, Ethan Schoonover had to make some compromises on the colors that
would be available in order to ensure compatibility with 16 color terminals.
This involved using some of the bright/bold versions of certain colors to make
up the grey &ldquo;content tones&rdquo; section of the scheme, and using the &ldquo;bright black&rdquo;
color for one of the dark background tones. Unfortunately, some programs use
this color, and those using Solarized as their color scheme will find some of
their output unreadable, since it is the same color as the terminal background.
Even with all the issues open on the subject, it remains a problem because the
Solarized palette needs all 16 colors and many program authors are unwilling to
alter their code just so it works in one particular colorscheme.  After digging
through multiple github issues on the topic, it seems that nobody has yet come
up with a solution to the problem.</p>

<h4>The Fix</h4>

<p>If we had an extra color to work with, then we could use it for the second dark
background tone and leave bright black as something visible. Unfortunately
we&rsquo;re limited to 16 color codes in the terminal, but most terminal emulators allow
you to set the background color independently of the 16 color palette.
Therefore, my solution to the problem is to redefine the bright black color in
the terminal palette to something other than the background tone (I used the
value for the &ldquo;base01&rdquo; color in solarized, but it could be anything), and set
the background of any program that supports it to be transparent (or no color).
This will allow the correct background color, set in the terminal emulator, to
show through. Any text that wants to be this color will also have to be set to
transparent, but not every program has a simple way of configuring this. As a
workaround, set the background of the text in question to be transparent and the
foreground to be whatever you want to background to be, and then invert the
colors. In the shell ANSI escape codes this would look something like
<code>\e[34;49;7m</code>.</p>

<h3>Example Tweaking Vim</h3>

<p>In vim you can already fix this in most cases by putting <code>let
g:solarized_termtrans = 1</code> in your vimrc, but there are a few edge cases that
will still get the incorrect color. To fix this, modify the solarized
colorscheme at line 285 to read <code>let s:base03 = "NONE"</code>. This will allow the
background tone to fall through to the terminal emulator background throughout
vim. For some reason the <code>SignColumn</code> (where syntastic and other plugins put
their marks) still uses the wrong color, so you also need to change line 657 to
read <code>exe "hi! SignColumn"     .s:fmt_none   .s:fg_base0  .s:bg_base03</code>. You can
download a copy with these modifications from
<a href="/downloads/code/solarized/solarized-mod.vim">here</a> if you&rsquo;d like. I&rsquo;ll leave it
up to you to modify your terminal&rsquo;s colorscheme.</p>

<h2>2. Switching Between The Light And Dark Palette Can Be Easier</h2>

<p>One of the biggest selling points of Solarized is that it has two variants, one
with a light background and one with a dark background, and both provide the
same contrast against each text color. While this is certainly a nice feature,
the procedure for switching between the two is just a bit too much. Assuming
you&rsquo;re using Solarized in a terminal you have to:</p>

<p><div class="img-wrapper flex-content basic-alignment right">
<img src="/downloads/pictures/solarized_mixed.png" width="400" title="&lsquo;Terminal: Solarized Light, Vim: Solarized Dark&rsquo; &lsquo;Solarized light and dark palettes conflicting.&rsquo;" >
<p>&lsquo;Terminal: Solarized Light, Vim: Solarized Dark&rsquo; &lsquo;Solarized light and dark palettes conflicting.&rsquo;</p>
</div>
1. Change the version your terminal emulator is using
2. Switch the version the programs inside your terminal emulator are using.</p>

<p>And if the version you&rsquo;re switching to is not the default that your programs
start up with, you&rsquo;ll have to repeat step 2 every time you open a new instance
of a program that uses Solarized, or have it trying to us the light colorscheme
with the dark palette, which does not work.</p>

<h4>The Fix</h4>

<p>If you read the
<a href="http://ethanschoonover.com/solarized#usage-development">Solarized hompage</a>
you&rsquo;ll see that switching between the light and dark palettes involves switching
the two background colors and the four gray &ldquo;content tones&rdquo;. Most colorschemes
check which version you are using (e.g. checking the value of <code>background</code> in
vim), and then set the colors accordingly. However, since the palette is
controlled by the terminal emulator we should just be able to swap the values
there and let any programs running inside of it think they&rsquo;re always in the
default palette. Since the default is almost always the dark one, I just copied
the dark terminal palette and swapped the values for:</p>

<ul>
<li><code>black</code> with <code>white</code></li>
<li><code>brblack</code> with <code>brwhite</code></li>
<li><code>bryellow</code> with <code>brblue</code></li>
<li><code>brgreen</code> with <code>brcyan</code></li>
</ul>


<p>Using this modified palette in place of the normal light one, you can easily
switch between the two palettes just by changing the pallete in your terminal
emulator, no changes to your programs required.</p>

<h2>Final Thoughts</h2>

<p>Of the two issues and solutions I&rsquo;ve discussed, one is a long standing issue
with the colorscheme that has certainly seen some people pass over or abandon
it, and the other is just a small change that I think makes using it in the
terminal a bit smoother. So why not submit at least the unreadable text fix in a
pull request and solve everyones problems with it? Part of the reason is the
amount of work that would need to go into that sort of change. All of the
colorschemes for the different terminal emulators and programs would need to be
changed and tested, which makes for quite a few config files written in a
variety of different languages, not to mention individual PRs would need to be
made to each of the program-specific repos. Another is the probable futility of
doing so; the last update to the main repo was almost a year ago, despite a
steady stream of pull requests for various small changes. I find it unlikely
that a pull request rewriting a large portion of the code will be well received,
assuming anyone is still checking incoming issues and PRs at all. It&rsquo;s possible
that at some point in the future I might put in this work anyway, and just
create a new fork of the colorscheme if the PR is not accepted, but that&rsquo;s all
up in the air for the time being. Anyone who wants my combined versions of these
fixes from <a href="http://github.com/jmatth/dotfiles">my dotfiles</a> can copy them from
that repo (I currently have customized configs for
<a href="https://github.com/jmatth/dotfiles/blob/master/link/.vim/colors/solarized.vim">vim</a>,
<a href="https://github.com/jmatth/dotfiles/tree/master/copy/.config/roxterm.sourceforge.net/Colours">roxterm</a>,
and <a href="https://github.com/jmatth/dotfiles/tree/master/aux/iterm">iterm</a>). If
anyone runs across this and needs help implementing the fixes for their favorite
program, feel free to drop me a line in the comments or on
<a href="http://twitter.com/jmatth92">Twitter</a> and I&rsquo;ll try to help out. Happy (low
contrast) hacking.</p>

<p>Josh</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Vim Python Plugins]]></title>
    <link href="http://jmatth.com/blog/2013/03/10/managing-vim-python-plugins/"/>
    <updated>2013-03-10T16:30:00-04:00</updated>
    <id>http://jmatth.com/blog/2013/03/10/managing-vim-python-plugins</id>
    <content type="html"><![CDATA[<h2>Conditionally installing the coolest new Vim plugins.</h2>

<p>Anyone who uses Vim regularly is probably familiar with its ever growing list
of useful plugins. Most of these have been traditionally written in Vim&rsquo;s native
scripting language Vimscript. However, it seems there is a growing trend of
developers moving away from this in favor of writing their new plugins in
languages like Python and Ruby, which newer versions of Vim can be compiled with
support for. Unfortunately, this can create a problem for users who what to use
these new plugins, but work on several machines which may or may not meet the
requirements of these plugins. In this post, I&rsquo;ll show how to get around this
problem with <a href="https://github.com/gmarik/vundle">Vundle</a> and a little bit of
vimrc scripting</p>

<!--more-->


<p>The first step to installing plugins based on the local Vim configuration is
simple: move plugin management inside of Vim. To do this we&rsquo;ll install the
plugin <a href="https://github.com/gmarik/vundle">Vundle</a>, which allows you to specify
which plugins to install in your vimrc. While there is plenty of documentation
on how to install Vundle on its github page, the short version is:</p>

<ol>
<li><p>Run <code>git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle</code></p></li>
<li><p>Add the following to the top of your vimrc:</p></li>
</ol>


<pre><code class="vim vimrc">set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/

Bundle 'gmarik/vundle'
</code></pre>

<p>Don&rsquo;t worry about the <code>filetype off</code> part, we&rsquo;ll turn it back on after we define
our bundles. If you keep your dotfiles in a git repo, you should also add that
git clone command to your install script so that Vundle will always be
available.</p>

<p>Once we have Vundle installed, we can start adding plugin bundles. I&rsquo;m a big fan
of fuzzy file searching, so as an example we&rsquo;ll install
<a href="http://github.com/kien/ctrlp.vim">ctrlp</a></p>

<pre><code class="vim vimrc">set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/

Bundle 'gmarik/vundle'

" Plugin bundles
Bundle 'kien/ctrlp.vim'
</code></pre>

<p>Now restart Vim or reload your vimrc and enter <code>:BundleInstall</code>. This should
open a new window where you can see the progress as the new plugin is installed.</p>

<p>So using Vundle to manage plugins is easy, but what about those cool Python
plugins I mentioned up at the top of the page? For that, let&rsquo;s try installing
<a href="https://github.com/sirver/ultisnips">UltiSnips</a>, a new snippet manager that has
become increasingly popular. The requirements state that it needs to run in a
version of Vim with python or python3 support compiled in and the system must
have Python 2.6 or greater installed. The first requirement is easy, since you
can check what features Vim has been compiled with by using the <code>has()</code> function
in your vimrc:</p>

<pre><code class="vim vimrc">set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/

Bundle 'gmarik/vundle'

" Plugin bundles
Bundle 'kien/ctrlp.vim'

" Python plugin bundles
if has('python') || has('python3')
    Bundle 'SirVer/ultisnips'
endif
</code></pre>

<p>Now when you run <code>:BundleInstall</code>, whether or not the plugin is installed will
depend on what options Vim was compiled with. Unfortunately, this will not
account for the second condition of the Python version, so on systems with older
versions of Python Vim could install this plugin and break. So the last thing we
need is a way to check the Python version from inside of Vim. To do this we will
set a variable directly in the Python interpreter:</p>

<pre><code class="vim vimrc">set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/

Bundle 'gmarik/vundle'

" Plugin bundles
Bundle 'kien/ctrlp.vim'

let s:python_ver = 0
silent! python import sys, vim;
\ vim.command("let s:python_ver="+"".join(map(str,sys.version_info[0:3])))

" Python plugin bundles
if (has('python') || has('python3')) &amp;&amp; s:python_ver &gt;= 260
    Bundle 'SirVer/ultisnips'
endif
</code></pre>

<p>What this addition does is set the script variable <code>python_ver</code> to 0, and then
attempts to run Python to change it to the full Python version. If we are in a
version of Vim without Python support, then the variable will simply remain set
to 0, and won&rsquo;t pass the <code>&gt;= 260</code> check.</p>

<p>Once last thing we can do is add some fallback plugins to be installed in case
the system we&rsquo;re on doesn&rsquo;t meet the requirements for the new Python versions:</p>

<pre><code class="vim vimrc">set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/

Bundle 'gmarik/vundle'

" Plugin bundles
Bundle 'kien/ctrlp.vim'

let s:python_ver = 0
silent! python import sys, vim;
\ vim.command("let s:python_ver="+"".join(map(str,sys.version_info[0:3])))

" Python plugin bundles
if (has('python') || has('python3')) &amp;&amp; s:python_ver &gt;= 260
    Bundle 'SirVer/ultisnips'
else
    Bundle 'garbas/vim-snipmate'
endif
</code></pre>

<p>And there you have it. Now you can drop this config onto virtually any system
and <code>:BundleInstall</code> will pull down the correct plugins. For adding plugins from
locations other than GitHub, take a look at the
<a href="https://github.com/gmarik/vundle#quick-start">Vundle Quick Start</a>, and feel
free to drop me a line in the comments if you run into trouble.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Dotfiles With Git]]></title>
    <link href="http://jmatth.com/blog/2012/10/27/dots-pt1/"/>
    <updated>2012-10-27T22:30:00-04:00</updated>
    <id>http://jmatth.com/blog/2012/10/27/dots-pt1</id>
    <content type="html"><![CDATA[<h3>All the cool kids are doing it.</h3>

<p>As a Linux user, one of the great things is how much everything on the system
can be customized exactly to your liking, and how easy it is to do so through
(usually) simple plain-text config files. One not-so-great thing is having to
copy those files around whenever you get access to a new machine and want all
your nice customizations on there too, or even worse, loosing all those careful
tweaks in a system reinstall.</p>

<p>Fortunately there is a better way. By using git to manage all your
configuration files (&ldquo;dotfiles&rdquo;, since they are usually prefixed with a <code>.</code>),
you can store all your settings remotely and easily sync them across any number
of computers. Even if you&rsquo;re fairly new to Linux and don&rsquo;t have much in the way
of dotfiles, keeping whatever you do have in git is still a good idea because 1)
Even if you don&rsquo;t have a lot now, you will eventually so might as well start
early, and 2) No matter how little configuration you might have, having to
retype it after a system reinstall is never fun, so keeping it in a safe place
just makes sense. So with that in mind, lets get started.</p>

<!-- more -->


<p>Before we start, I&rsquo;m assuming you have git installed and a github account ready to
go. If not, then you should register for a free account
<a href="https://github.com/signup/free">here</a>. It&rsquo;s a great website for hosting your
git repos, and if you&rsquo;re a student you can even get a few free private repos to
store all your secrets. Once you create an account, just run through the super
easy instructions to get git set up on your machine.</p>

<p>To get started, go to your github and create a new repo name <em>dotfiles</em>, and
clone it to your local machine. Now to start out, lets just add one file to the
repo. If you have a bashrc, then I&rsquo;d recommend starting with that. Copy the file
<code>.bashrc</code> from your home directory to <code>dotfiles/bashrc</code>. I&rsquo;m omitting the <code>.</code>
on purpose in the repo, because having it hidden in a repository used for
nothing but dotfiles doesn&rsquo;t make much sense. Once it&rsquo;s there you can add to the
repo with <code>git add bashrc</code> and <code>git commit -m</code>adding bashrc.`. Finally, push
the changes to github to access your bashrc from anywhere with an internet
connection.</p>

<p>So now you can take any other configuration files you have, add them to the
repo, and pull them down to any other computers you use. Of course, now you have
to copy all your files back into your home directory each time you pull down new
changes. That, or you could use a shell script to create symlinks for each
file so that whenever you run <code>git pull</code> you don&rsquo;t have to do any extra work.
Just copy or download the following script into a file called <code>link.sh</code>, make it executable,
and add it to the repo. Then whenever you add new files, just run <code>./link.sh</code>
inside the repo to create matching symlinks in your home directory.</p>

<p><figure class='code'><figcaption><span>Create Dotfiles Symlinks (link.sh)</span> <a href='/downloads/code/dots-pt1/link.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Ignore certain files</span>
</span><span class='line'><span class="nv">IGNORE</span><span class="o">=</span><span class="s2">&quot;link\.sh&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Get current directory</span>
</span><span class='line'><span class="nv">DIR</span><span class="o">=</span><span class="s2">&quot;$( cd &quot;</span><span class="k">$(</span> dirname <span class="s2">&quot;${BASH_SOURCE[0]}&quot;</span> <span class="k">)</span><span class="s2">&quot; &amp;&amp; pwd )&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -e <span class="s2">&quot;\e[1;35mSymlinking config files:\e[m&quot;</span>
</span><span class='line'><span class="k">for</span> file in <span class="k">$(</span>git ls-files <span class="p">|</span> egrep -v <span class="nv">$IGNORE</span><span class="k">)</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'>	<span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$(readlink ~/.$file)&quot;</span> !<span class="o">=</span> <span class="s2">&quot;$DIR/$file&quot;</span> <span class="o">]</span>
</span><span class='line'>	<span class="k">then</span>
</span><span class='line'>		<span class="nb">echo</span> <span class="nv">$file</span>
</span><span class='line'>		<span class="k">if</span> <span class="nb">test</span> ! -d <span class="sb">`</span>dirname ~/.<span class="nv">$file</span><span class="sb">`</span>
</span><span class='line'>		<span class="k">then</span>
</span><span class='line'>			mkdir -p <span class="sb">`</span>dirname ~/.<span class="nv">$file</span><span class="sb">`</span>
</span><span class='line'>		<span class="k">fi</span>
</span><span class='line'>		<span class="k">if</span> <span class="nb">test</span> -h ~/.<span class="nv">$file</span>
</span><span class='line'>		<span class="k">then</span>
</span><span class='line'>			unlink ~/.<span class="nv">$file</span>
</span><span class='line'>		<span class="k">fi</span>
</span><span class='line'>		rm -rf ~/.<span class="nv">$file</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span> &gt;/dev/null
</span><span class='line'>		ln -sf <span class="nv">$DIR</span>/<span class="nv">$file</span> ~/.<span class="nv">$file</span>
</span><span class='line'>	<span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
</feed>
