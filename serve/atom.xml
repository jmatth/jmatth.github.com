<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Josh Matthews]]></title>
  <link href="http://jmatth.com/atom.xml" rel="self"/>
  <link href="http://jmatth.com/"/>
  <updated>2016-01-20T16:24:44-05:00</updated>
  <id>http://jmatth.com/</id>
  <author>
    <name><![CDATA[Josh Matthews]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Solarized++]]></title>
    <link href="http://jmatth.com/blog/2014/06/15/solarized-plus-plus/"/>
    <updated>2014-06-15T13:28:07-04:00</updated>
    <id>http://jmatth.com/blog/2014/06/15/solarized-plus-plus</id>
    <content type="html"><![CDATA[<p>A long time ago, I ran across <a href="http://ethanschoonover.com/solarized">Solarized</a>,
a very popular colorscheme for the terminal and most text editors. While my
first reaction was something along the lines of &ldquo;Eww, blue background?&rdquo;, I
eventually gave it a try because of how highly recommend it was.  In less than a
week it became my favorite color scheme because of how easy on the eyes it is
and how well the syntax highlighting fits together (both results of the scheme&rsquo;s
<a href="http://ethanschoonover.com/solarized#features">careful design</a>).  After using
the theme for some time though, I ran into a couple problems with it. One was
actually a well known bug that made some text unreadable, and the other was just
something I thought could be made easier. I&rsquo;m writing about my fixes for both
problems here so that others who have the same problems can solve them faster in
the future.</p>

<!-- MORE -->


<h2>1. The &ldquo;Bright Black&rdquo; Terminal Color Is Invisible</h2>

<div class="img-wrapper flex-content basic-alignment right">
<img src="http://jmatth.com/downloads/pictures/solarized_problems.png" title="This is not what the output should look like." alt="Bright black text invisible in solarized.">
<p>This is not what the output should look like.</p>
</div>


<p>This is a long standing issue that has been
<a href="https://github.com/visionmedia/express/issues/1700">extensively</a>
<a href="https://github.com/gruntjs/grunt/issues/181">documented</a>
<a href="https://github.com/altercation/solarized/issues/220">on</a>
<a href="https://github.com/visionmedia/mocha/issues/802">github</a>.  When designing
Solarized, Ethan Schoonover had to make some compromises on the colors that
would be available in order to ensure compatibility with 16 color terminals.
This involved using some of the bright/bold versions of certain colors to make
up the grey &ldquo;content tones&rdquo; section of the scheme, and using the &ldquo;bright black&rdquo;
color for one of the dark background tones. Unfortunately, some programs use
this color, and those using Solarized as their color scheme will find some of
their output unreadable, since it is the same color as the terminal background.
Even with all the issues open on the subject, it remains a problem because the
Solarized palette needs all 16 colors and many program authors are unwilling to
alter their code just so it works in one particular colorscheme.  After digging
through multiple github issues on the topic, it seems that nobody has yet come
up with a solution to the problem.</p>

<h4>The Fix</h4>

<p>If we had an extra color to work with, then we could use it for the second dark
background tone and leave bright black as something visible. Unfortunately
we&rsquo;re limited to 16 color codes in the terminal, but most terminal emulators allow
you to set the background color independently of the 16 color palette.
Therefore, my solution to the problem is to redefine the bright black color in
the terminal palette to something other than the background tone (I used the
value for the &ldquo;base01&rdquo; color in solarized, but it could be anything), and set
the background of any program that supports it to be transparent (or no color).
This will allow the correct background color, set in the terminal emulator, to
show through. Any text that wants to be this color will also have to be set to
transparent, but not every program has a simple way of configuring this. As a
workaround, set the background of the text in question to be transparent and the
foreground to be whatever you want to background to be, and then invert the
colors. In the shell ANSI escape codes this would look something like
<code>\e[34;49;7m</code>.</p>

<h3>Example Tweaking Vim</h3>

<p>In vim you can already fix this in most cases by putting <code>let
g:solarized_termtrans = 1</code> in your vimrc, but there are a few edge cases that
will still get the incorrect color. To fix this, modify the solarized
colorscheme at line 285 to read <code>let s:base03 = "NONE"</code>. This will allow the
background tone to fall through to the terminal emulator background throughout
vim. For some reason the <code>SignColumn</code> (where syntastic and other plugins put
their marks) still uses the wrong color, so you also need to change line 657 to
read <code>exe "hi! SignColumn"     .s:fmt_none   .s:fg_base0  .s:bg_base03</code>. You can
download a copy with these modifications from
<a href="http://jmatth.com/downloads/code/solarized/solarized-mod.vim">here</a> if you&rsquo;d like. I&rsquo;ll leave it
up to you to modify your terminal&rsquo;s colorscheme.</p>

<h2>2. Switching Between The Light And Dark Palette Can Be Easier</h2>

<p>One of the biggest selling points of Solarized is that it has two variants, one
with a light background and one with a dark background, and both provide the
same contrast against each text color. While this is certainly a nice feature,
the procedure for switching between the two is just a bit too much. Assuming
you&rsquo;re using Solarized in a terminal you have to:</p>

<div class="img-wrapper flex-content basic-alignment right">
<img src="http://jmatth.com/downloads/pictures/solarized_mixed.png" width="400" title="Terminal: Solarized Light, Vim: Solarized Dark" alt="Solarized light and dark palettes conflicting.">
<p>Terminal: Solarized Light, Vim: Solarized Dark</p>
</div>


<ol>
<li>Change the version your terminal emulator is using</li>
<li>Switch the version the programs inside your terminal emulator are using.</li>
</ol>


<p>And if the version you&rsquo;re switching to is not the default that your programs
start up with, you&rsquo;ll have to repeat step 2 every time you open a new instance
of a program that uses Solarized, or have it trying to us the light colorscheme
with the dark palette, which does not work.</p>

<h4>The Fix</h4>

<p>If you read the
<a href="http://ethanschoonover.com/solarized#usage-development">Solarized hompage</a>
you&rsquo;ll see that switching between the light and dark palettes involves switching
the two background colors and the four gray &ldquo;content tones&rdquo;. Most colorschemes
check which version you are using (e.g. checking the value of <code>background</code> in
vim), and then set the colors accordingly. However, since the palette is
controlled by the terminal emulator we should just be able to swap the values
there and let any programs running inside of it think they&rsquo;re always in the
default palette. Since the default is almost always the dark one, I just copied
the dark terminal palette and swapped the values for:</p>

<ul>
<li><code>black</code> with <code>white</code></li>
<li><code>brblack</code> with <code>brwhite</code></li>
<li><code>bryellow</code> with <code>brblue</code></li>
<li><code>brgreen</code> with <code>brcyan</code></li>
</ul>


<p>Using this modified palette in place of the normal light one, you can easily
switch between the two palettes just by changing the pallete in your terminal
emulator, no changes to your programs required.</p>

<h2>Final Thoughts</h2>

<p>Of the two issues and solutions I&rsquo;ve discussed, one is a long standing issue
with the colorscheme that has certainly seen some people pass over or abandon
it, and the other is just a small change that I think makes using it in the
terminal a bit smoother. So why not submit at least the unreadable text fix in a
pull request and solve everyones problems with it? Part of the reason is the
amount of work that would need to go into that sort of change. All of the
colorschemes for the different terminal emulators and programs would need to be
changed and tested, which makes for quite a few config files written in a
variety of different languages, not to mention individual PRs would need to be
made to each of the program-specific repos. Another is the probable futility of
doing so; the last update to the main repo was almost a year ago, despite a
steady stream of pull requests for various small changes. I find it unlikely
that a pull request rewriting a large portion of the code will be well received,
assuming anyone is still checking incoming issues and PRs at all. It&rsquo;s possible
that at some point in the future I might put in this work anyway, and just
create a new fork of the colorscheme if the PR is not accepted, but that&rsquo;s all
up in the air for the time being. Anyone who wants my combined versions of these
fixes from <a href="http://github.com/jmatth/dotfiles">my dotfiles</a> can copy them from
that repo (I currently have customized configs for
<a href="https://github.com/jmatth/dotfiles/blob/master/link/.vim/colors/solarized.vim">vim</a>,
<a href="https://github.com/jmatth/dotfiles/tree/master/copy/.config/roxterm.sourceforge.net/Colours">roxterm</a>,
and <a href="https://github.com/jmatth/dotfiles/tree/master/aux/iterm">iterm</a>). If
anyone runs across this and needs help implementing the fixes for their favorite
program, feel free to drop me a line in the comments or on
<a href="http://twitter.com/jmatth92">Twitter</a> and I&rsquo;ll try to help out. Happy (low
contrast) hacking.</p>

<p>Josh</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Vim Python Plugins]]></title>
    <link href="http://jmatth.com/blog/2013/03/10/managing-vim-python-plugins/"/>
    <updated>2013-03-10T16:30:00-04:00</updated>
    <id>http://jmatth.com/blog/2013/03/10/managing-vim-python-plugins</id>
    <content type="html"><![CDATA[<h2>Conditionally installing the coolest new Vim plugins.</h2>

<p>Anyone who uses Vim regularly is probably familiar with its ever growing list
of useful plugins. Most of these have been traditionally written in Vim&rsquo;s native
scripting language Vimscript. However, it seems there is a growing trend of
developers moving away from this in favor of writing their new plugins in
languages like Python and Ruby, which newer versions of Vim can be compiled with
support for. Unfortunately, this can create a problem for users who what to use
these new plugins, but work on several machines which may or may not meet the
requirements of these plugins. In this post, I&rsquo;ll show how to get around this
problem with <a href="https://github.com/gmarik/vundle">Vundle</a> and a little bit of
vimrc scripting</p>

<!--more-->


<p>The first step to installing plugins based on the local Vim configuration is
simple: move plugin management inside of Vim. To do this we&rsquo;ll install the
plugin <a href="https://github.com/gmarik/vundle">Vundle</a>, which allows you to specify
which plugins to install in your vimrc. While there is plenty of documentation
on how to install Vundle on its github page, the short version is:</p>

<ol>
<li><p>Run <code>git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle</code></p></li>
<li><p>Add the following to the top of your vimrc:</p></li>
</ol>


<figure class='code'><figcaption><span>vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">nocompatible</span>
</span><span class='line'><span class="k">filetype</span> off
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nb">rtp</span><span class="p">+=~</span><span class="sr">/.vim/</span>bundle<span class="sr">/vundle/</span>
</span><span class='line'>
</span><span class='line'>Bundle <span class="s1">&#39;gmarik/vundle&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t worry about the <code>filetype off</code> part, we&rsquo;ll turn it back on after we define
our bundles. If you keep your dotfiles in a git repo, you should also add that
git clone command to your install script so that Vundle will always be
available.</p>

<p>Once we have Vundle installed, we can start adding plugin bundles. I&rsquo;m a big fan
of fuzzy file searching, so as an example we&rsquo;ll install
<a href="http://github.com/kien/ctrlp.vim">ctrlp</a></p>

<figure class='code'><figcaption><span>vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">nocompatible</span>
</span><span class='line'><span class="k">filetype</span> off
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nb">rtp</span><span class="p">+=~</span><span class="sr">/.vim/</span>bundle<span class="sr">/vundle/</span>
</span><span class='line'>
</span><span class='line'>Bundle <span class="s1">&#39;gmarik/vundle&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Plugin bundles</span>
</span><span class='line'>Bundle <span class="s1">&#39;kien/ctrlp.vim&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now restart Vim or reload your vimrc and enter <code>:BundleInstall</code>. This should
open a new window where you can see the progress as the new plugin is installed.</p>

<p>So using Vundle to manage plugins is easy, but what about those cool Python
plugins I mentioned up at the top of the page? For that, let&rsquo;s try installing
<a href="https://github.com/sirver/ultisnips">UltiSnips</a>, a new snippet manager that has
become increasingly popular. The requirements state that it needs to run in a
version of Vim with python or python3 support compiled in and the system must
have Python 2.6 or greater installed. The first requirement is easy, since you
can check what features Vim has been compiled with by using the <code>has()</code> function
in your vimrc:</p>

<figure class='code'><figcaption><span>vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">nocompatible</span>
</span><span class='line'><span class="k">filetype</span> off
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nb">rtp</span><span class="p">+=~</span><span class="sr">/.vim/</span>bundle<span class="sr">/vundle/</span>
</span><span class='line'>
</span><span class='line'>Bundle <span class="s1">&#39;gmarik/vundle&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Plugin bundles</span>
</span><span class='line'>Bundle <span class="s1">&#39;kien/ctrlp.vim&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Python plugin bundles</span>
</span><span class='line'><span class="k">if</span> has<span class="p">(</span><span class="s1">&#39;python&#39;</span><span class="p">)</span> <span class="p">||</span> has<span class="p">(</span><span class="s1">&#39;python3&#39;</span><span class="p">)</span>
</span><span class='line'>  Bundle <span class="s1">&#39;SirVer/ultisnips&#39;</span>
</span><span class='line'><span class="k">endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when you run <code>:BundleInstall</code>, whether or not the plugin is installed will
depend on what options Vim was compiled with. Unfortunately, this will not
account for the second condition of the Python version, so on systems with older
versions of Python Vim could install this plugin and break. So the last thing we
need is a way to check the Python version from inside of Vim. To do this we will
set a variable directly in the Python interpreter:</p>

<figure class='code'><figcaption><span>vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">nocompatible</span>
</span><span class='line'><span class="k">filetype</span> off
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nb">rtp</span><span class="p">+=~</span><span class="sr">/.vim/</span>bundle<span class="sr">/vundle/</span>
</span><span class='line'>
</span><span class='line'>Bundle <span class="s1">&#39;gmarik/vundle&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Plugin bundles</span>
</span><span class='line'>Bundle <span class="s1">&#39;kien/ctrlp.vim&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">s</span>:python_ver <span class="p">=</span> <span class="m">0</span>
</span><span class='line'><span class="k">silent</span><span class="p">!</span> python import sys<span class="p">,</span> <span class="k">vim</span>;
</span><span class='line'>\ <span class="k">vim</span>.command<span class="p">(</span><span class="s2">&quot;let s:python_ver=&quot;</span><span class="p">+</span><span class="s2">&quot;&quot;</span>.<span class="k">join</span><span class="p">(</span>map<span class="p">(</span>str<span class="p">,</span>sys.version_info[<span class="m">0</span>:<span class="m">3</span>]<span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Python plugin bundles</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span>has<span class="p">(</span><span class="s1">&#39;python&#39;</span><span class="p">)</span> <span class="p">||</span> has<span class="p">(</span><span class="s1">&#39;python3&#39;</span><span class="p">))</span> &amp;&amp; <span class="k">s</span>:python_ver <span class="p">&gt;=</span> <span class="m">260</span>
</span><span class='line'>  Bundle <span class="s1">&#39;SirVer/ultisnips&#39;</span>
</span><span class='line'><span class="k">endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>What this addition does is set the script variable <code>python_ver</code> to 0, and then
attempts to run Python to change it to the full Python version. If we are in a
version of Vim without Python support, then the variable will simply remain set
to 0, and won&rsquo;t pass the <code>&gt;= 260</code> check.</p>

<p>Once last thing we can do is add some fallback plugins to be installed in case
the system we&rsquo;re on doesn&rsquo;t meet the requirements for the new Python versions:</p>

<figure class='code'><figcaption><span>vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">nocompatible</span>
</span><span class='line'><span class="k">filetype</span> off
</span><span class='line'>
</span><span class='line'><span class="k">set</span> <span class="nb">rtp</span><span class="p">+=~</span><span class="sr">/.vim/</span>bundle<span class="sr">/vundle/</span>
</span><span class='line'>
</span><span class='line'>Bundle <span class="s1">&#39;gmarik/vundle&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Plugin bundles</span>
</span><span class='line'>Bundle <span class="s1">&#39;kien/ctrlp.vim&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">s</span>:python_ver <span class="p">=</span> <span class="m">0</span>
</span><span class='line'><span class="k">silent</span><span class="p">!</span> python import sys<span class="p">,</span> <span class="k">vim</span>;
</span><span class='line'>\ <span class="k">vim</span>.command<span class="p">(</span><span class="s2">&quot;let s:python_ver=&quot;</span><span class="p">+</span><span class="s2">&quot;&quot;</span>.<span class="k">join</span><span class="p">(</span>map<span class="p">(</span>str<span class="p">,</span>sys.version_info[<span class="m">0</span>:<span class="m">3</span>]<span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Python plugin bundles</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span>has<span class="p">(</span><span class="s1">&#39;python&#39;</span><span class="p">)</span> <span class="p">||</span> has<span class="p">(</span><span class="s1">&#39;python3&#39;</span><span class="p">))</span> &amp;&amp; <span class="k">s</span>:python_ver <span class="p">&gt;=</span> <span class="m">260</span>
</span><span class='line'>  Bundle <span class="s1">&#39;SirVer/ultisnips&#39;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  Bundle <span class="s1">&#39;garbas/vim-snipmate&#39;</span>
</span><span class='line'><span class="k">endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there you have it. Now you can drop this config onto virtually any system
and <code>:BundleInstall</code> will pull down the correct plugins. For adding plugins from
locations other than GitHub, take a look at the
<a href="https://github.com/gmarik/vundle#quick-start">Vundle Quick Start</a>, and feel
free to drop me a line in the comments if you run into trouble.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi In The Dorm]]></title>
    <link href="http://jmatth.com/blog/2013/02/18/rpi-dorm/"/>
    <updated>2013-02-18T12:00:00-05:00</updated>
    <id>http://jmatth.com/blog/2013/02/18/rpi-dorm</id>
    <content type="html"><![CDATA[<h2>Using a Raspberry Pi single board computer as a dorm room command center.</h2>

<p>Some time ago I bought a <a href="http://www.raspberrypi.org/">Raspberry Pi</a>, and once
the initial excitement of setting up the new system wore off, I realized that I
had absolutely no plans thought out on what to use it for. Well rather than let
such an interesting new device go to waste, I set about thinking of things I
might want to implement on my dorm network, and eventually digging through my
spare parts bin to see what unused electronics I might be able to use in the
projects. Listed in this post are my three favorite uses that I came up with for
the Pi on my dorm network, and instructions on how to implement them yourself.</p>

<!--more-->


<hr />

<p><a id="top"></a>
<strong>Warning!</strong> This is a long post. For your convenience here are some links to
jump by section:</p>

<ol>
<li><a href="#tunnel">Reverse SSH Tunnel</a></li>
<li><a href="#nas">Networked Attached Storage</a></li>
<li><a href="#deluge">Deluge Torrent Daemon</a></li>
</ol>


<hr />

<br />


<h3><a id="tunnel"></a>Bypass Dorm NAT With a Reverse SSH Tunnel</h3>

<p>The first thing I wanted to do was setup a way to access the Pi via SSH from
outside my dorm, which presented the first problem: all the IP addresses in my
dorm (and indeed most dorms) are behind a
<a href="http://en.wikipedia.org/wiki/Network_address_translation">NAT</a> system. For
anyone who isn&rsquo;t familiar with this, the short explanation is that all the
connections inside the dorm share the same external IP address, and as a
consequence of this I couldn&rsquo;t just forward port 22 to my Pi. Fortunately, this
problem can be easily solved with a small script and some SSH magic.</p>

<p>In order to carry out this fix, you&rsquo;ll need access to an eternal server that you
are already able to SSH into. In many cases, you could already have this through
your school, such as in my case where I had SSH access to both several machines
in the computer science computer lab, and the campus email server. If you check
and determine that your school does not provide any SSH access, I&rsquo;d recommend
watching <a href="http://www.lowendbox.com/">Low End Box</a> and renting the cheapest VPS
you can find. We don&rsquo;t need anything powerful, it&rsquo;s essentially just going to
act as a proxy.</p>

<p>Once you determine the server you&rsquo;ll use to act as a proxy, the next step is to
enable public key access so that we can automate the connection later. Since
we&rsquo;ll need the privte key to be unencrypted, you should generate new
public/private key pair specifcally for this purpose (because I know everyone
reading this practices good security and would normally put a passphrase on
their private key, right? ಠ_ಠ). For our purposes, lets name this new key
<code>tun_rsa</code>:</p>

<figure class='code'><figcaption><span>bash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">you@raspberrypi: ~$</span> ssh-keygen
</span><span class='line'><span class="go">Generating public/private rsa key pair.</span>
</span><span class='line'><span class="go">Enter file in which to save the key (/home/you/.ssh/id_rsa): /home/you/.ssh/tun_rsa</span>
</span><span class='line'><span class="go">Enter passphrase (empty for no passphrase):</span>
</span><span class='line'><span class="go">Enter same passphrase again:</span>
</span><span class='line'><span class="go">Your identification has been saved in /home/you/.ssh/tun_rsa.</span>
</span><span class='line'><span class="go">Your public key has been saved in /home/you/.ssh/tun_rsa.pub.</span>
</span><span class='line'><span class="go">The key fingerprint is:</span>
</span><span class='line'><span class="go">cd:d5:12:84:a8:7c:4e:ff:e0:e2:af:fa:4a:02:1a:ad you@raspberrypi</span>
</span><span class='line'><span class="go">The key&#39;s randomart image is:</span>
</span><span class='line'><span class="go">+--[ RSA 2048]----+</span>
</span><span class='line'><span class="go">|         . oo    |</span>
</span><span class='line'><span class="go">|        . .  o   |</span>
</span><span class='line'><span class="go">|     . .    o .  |</span>
</span><span class='line'><span class="go">| .    o oo . .   |</span>
</span><span class='line'><span class="go">|. o    +S.o      |</span>
</span><span class='line'><span class="go">| + .    . o      |</span>
</span><span class='line'><span class="go">|E   . .  . o     |</span>
</span><span class='line'><span class="go">|     o  . . .    |</span>
</span><span class='line'><span class="go">|      o=++.      |</span>
</span><span class='line'><span class="go">+-----------------+</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, install the key on the proxy server with <code>ssh-copy-id -i .ssh/tun\_rsa.pub
you@proxy</code>. For security, you should also add the commands
<code>command="/bin/false",no-pty</code> in front of the key entry in authorized_keys on
the proxy server, like so (key shortened for readability):</p>

<figure class='code'><figcaption><span>~/.ssh/authorized_keys</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>command=&quot;/bin/false&quot;,no-pty ssh-rsa AAAAB3Nz...GCBNc6P you@raspberrypi
</span></code></pre></td></tr></table></div></figure>


<p>This will prevent us from executing any commands on the server when logging in
with this key, but still allow us to create the reverse tunnel we&rsquo;re working
towards.</p>

<p>You should also add the following line to your ssh config file on the proxy
server to prevent SSH from yelling at you for unrecognized keys:</p>

<figure class='code'><figcaption><span>~/.ssh/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Host localhost
</span><span class='line'>  StrictHostKeyChecking no
</span><span class='line'>  UserKnownHostsFile /dev/null
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re almost there, all that&rsquo;s left is a dependency and the shell script.
Install the package <code>autossh</code> on your Pi with <code>sudo apt-get update &amp;&amp; sudo
apt-get install autossh</code>. This is a nifty little program that will attempt to
restart your ssh connections if they die. Last, copy the following shell script
into the directory <code>/etc/network/if-up.d</code> and make it executable.</p>

<figure class='code'><figcaption><span>Reverse SSH Tunnel (reverse_tun.sh)</span> <a href='http://jmatth.com/downloads/code/rpi-dorm/reverse_tun.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'><span class="c"># Creates reverse tunnel through a remote server.</span>
</span><span class='line'><span class="nv">USER</span><span class="o">=</span>&lt;Local Username&gt;
</span><span class='line'><span class="nv">REMOTE_USER</span><span class="o">=</span>&lt;Remote Username&gt;
</span><span class='line'><span class="nv">KEY</span><span class="o">=</span>/home/you/.ssh/tun_rsa
</span><span class='line'><span class="nv">PORT</span><span class="o">=</span>&lt;Random High Port&gt;
</span><span class='line'><span class="nv">HOST</span><span class="o">=</span>&lt;Address of Proxy Server&gt;
</span><span class='line'><span class="nb">export </span><span class="nv">AUTOSSH_GATETIME</span><span class="o">=</span>0
</span><span class='line'><span class="nb">export </span><span class="nv">AUTOSSH_PORT</span><span class="o">=</span>27554
</span><span class='line'>
</span><span class='line'><span class="c"># ssh options:</span>
</span><span class='line'><span class="c"># -f: fork to background</span>
</span><span class='line'><span class="c"># -N: don&#39;t allocate a terminal</span>
</span><span class='line'><span class="c"># -q: quiet</span>
</span><span class='line'><span class="c"># -i: path to key file</span>
</span><span class='line'><span class="c"># -R: reverse tunnel remoteport:host:localport</span>
</span><span class='line'><span class="c"># -S: control socket location, or none</span>
</span><span class='line'>
</span><span class='line'>su -c <span class="s2">&quot;autossh -f -N -q -i ${KEY} -R ${PORT}:localhost:22 -S none ${REMOTE_USER}@${HOST} -oControlMaster=no -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no&quot;</span> <span class="nv">$USER</span>
</span></code></pre></td></tr></table></div></figure>


<p>Change the variables at the top of the file to match your information. For the
port number, you can choose anything above 1024 (only root can allocate ports
below that), but I&rsquo;d recommend choosing something above ten thousand, especially
if you are using a university computer that others have access to as your proxy.
That way there is less chance of someone else trying to use the same port.</p>

<p>So now we have set up the Raspberry Pi to automatically create a reverse SSH
tunnel whenever it connects to the internet. How we are able to utilize it
depends on what type of you were able to use as a proxy server. If you rented a
VPS or are using some other server that you have root permissions on, then you
can just enable <code>GatewayPorts</code> in <code>/etc/ssh/sshd\_config</code> and ssh directly to
that port. So if you decided to set the tunnel to use port <code>12345</code> on
<code>proxyhost</code> and you are able to enable <code>GatewayPorts</code>, then you can just type
<code>ssh -p 12345 you@proxyhost</code> and it will be as if you were SSHing directly into
the Pi. If however, you opted to use a server controlled by your school, then
there are a few more steps that must be taken.</p>

<p>To actually utilize the tunnel and access the Pi using a proxy server without
gateway ports enabled, there are two possible routes to take. In the first one,
we first SSH into the server being used as a proxy, and then SSH from there into
the Pi.  For example, if you choose <code>proxyhost</code> to host the tunnel on port
<code>12345</code>, you would do something like:</p>

<figure class='code'><figcaption><span>bash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">you@laptop: ~$</span> ssh you@proxyhost
</span><span class='line'><span class="go">you@proxyhost&#39;s password: &lt;Enter Password&gt;</span>
</span><span class='line'><span class="gp">you@proxyhost: ~$</span> ssh -p 12345 you@localhost
</span><span class='line'><span class="go">you@localhost&#39;s password: &lt;Enter Raspberry Pi Password&gt;</span>
</span><span class='line'><span class="gp">you@raspberrypi: ~$</span>
</span></code></pre></td></tr></table></div></figure>


<p>The second option is to define a proxy command in your local ssh config files to
make the process of connecting to the Pi a bit more direct. Add these lines to
the ssh config files on whichever machines you intend to remotely access the Pi
from:</p>

<figure class='code'><figcaption><span>~/.ssh/config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Host rpi.dorm
</span><span class='line'>  Proxycommand ssh you@proxyhost exec nc localhost 12345
</span></code></pre></td></tr></table></div></figure>


<p>What this does is tell SSH to run <a href="http://linux.die.net/man/1/nc">netcat</a> on the
proxy server to bridge the connections. You&rsquo;ll still need your login credentials
for both the proxy and the Pi, but the connection process will seem a lot more
seamless, especially if you use pubkeys instead of passwords for access. Also,
configuring the connection like this will allow you to use other SSH features
such as scp and sftp to copy files directly between your local machine and the
Pi, instead of first having to copy them to the proxy server. So you can do <code>scp
somefile rpi.dorm:</code> and it will just work.</p>

<p>So now that we can access the Pi from anywhere, what are we going to do with it?
Well, I use it to send
<a href="http://en.wikipedia.org/wiki/Wake-on-LAN#Magic_packet">magic packets</a> to my
desktop to power it on remotely, and for accessing files that I have stored on
the Pi using&hellip;</p>

<p><a href="#top">Back to top ↑</a></p>

<h3><a id="nas"></a>Network Attached Storage With an External Drive</h3>

<p>If you use more than a single computer on a network, it can often be convenient
if you have a networked drive that they can all access, whether it&rsquo;s to store
your media collection, documents, or just for transferring files. Unfortunately,
dedicated devices to run this type of service are usually expensive, so as an
alternative I decided to use my Raspberry Pi to host network storage using Samba
and an extra 500G USB hard drive I had lying around.</p>

<p>To create this setup, first format the hard drive with a Linux file system if it
doesn&rsquo;t already have one, but make sure to back up anything you might want off
of it first. Next, attach it to the Pi via USB. If the drive doesn&rsquo;t have it&rsquo;s
own power supply, you may need to use a powered USB hub, since the ports on the
Pi don&rsquo;t seem adequate for drives that run on USB power alone. Next, create a
directory where you wish to access the drive and mount it there, like so:</p>

<figure class='code'><figcaption><span>bash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">you@raspberrypi: ~$</span> sudo mkdir /nas
</span><span class='line'><span class="gp">you@raspberrypi: ~$</span> sudo mount /dev/sda1 /nas
</span></code></pre></td></tr></table></div></figure>


<p>Replace the path <code>/nas</code> to your liking, and change <code>/dev/sda1</code> to the path to
the partition you want to use.</p>

<p>To have it mount automatically at boot, add the following line to the bottom of
<code>/etc/fstab</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>/dev/sda1       /nas            ext4    exec,user,auto,rw 0       0
</span></code></pre></td></tr></table></div></figure>


<p>Again, be sure to change the paths if they&rsquo;re different on your system.</p>

<p>Next, we need to install Samba, a program that will allow us to host directories
as Windows share drives. Install it with <code>sudo apt-get install -y samba</code>. Once
it is done installing, cd into /etc/samba and backup the default config with
<code>sudo cp smb.conf smb.conf.bak</code>. Then open smb.conf with your editor and make
uncomment the line that says <code>security = user</code>. This will make it use your Pi
login information for accessing the network drive. Finally, go down to the
bottom of the file and add this section:</p>

<figure class='code'><figcaption><span>smb.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="k">[pi_nas]</span>
</span><span class='line'>  <span class="na">comment</span> <span class="o">=</span> <span class="s">RPI NAS</span>
</span><span class='line'><span class="s">  path = /nas</span>
</span><span class='line'><span class="s">  valid users = @users</span>
</span><span class='line'><span class="s">  force group = users</span>
</span><span class='line'><span class="s">  create mask = 0660</span>
</span><span class='line'><span class="s">  directory mask = 0771</span>
</span><span class='line'><span class="s">  read only = no</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously you should replace /nas with the path to your mountpoint if you used
something different.</p>

<p>Once you have the configs sorted out, start/restart the samba server with <code>sudo
service samba restart</code>. You can now mount the folder as a windows share drive at
<code>\\&lt;Raspberry Pi&gt;\pi_nas</code> from any other computers on the network. You can then
use it to store any files you want to access from multiple devices on the
network. Personally, I used it to store some of my music collection, and as the
storage location for the next trick.</p>

<p><a href="#top">Back to top ↑</a></p>

<h3><a id="deluge"></a>Deluge as a Centralized Torrent Daemon</h3>

<p>For all the bad press it gets from it&rsquo;s use digital piracy, BitTorrent is still
an incredibly useful technology that is used by many developers and virtually
every major Linux distribution, as well as many independent artists to
distribute their work across the internet. However, like any peer-to-peer
technology, BitTorrent is dependent on at least some of those peers actually
staying online to seed the downloads. This creates a problem for those who want
to pay it forward by seeding their completed downloads, but are not able to
leave their computer online 24/7. Fortunately for any Raspberry Pi owners, there
is a very nice cross-platform BitTorrent client called
<a href="http://deluge-torrent.org/">Deluge</a> which is capable as running on the Pi as a
daemon and seeding for as long as you want it to.</p>

<p><strong>Side Note</strong>: For all it&rsquo;s nice features, in my experience Deluge is not the
lightest of BitTorrent clients. It has run fine on just about every x86 computer
I&rsquo;ve ever used it on, but on the Pi it takes noticeably longer to bring up
torrent information and quite a while to check large files, none if which is
unexpected giving the Pis much lower processing power. I chose Deluge not for
it&rsquo;s speed but ease of use and ability to connect to the daemon from a client
over the network. If you want a blazingly fast and lightweight client, try
looking at <a href="http://libtorrent.rakshasa.no/">rtorrent</a>, be be prepared to dig
through lots of documentation and forum posts getting it to work. Now, onward!</p>

<p>To start running deluge as a daemon on your Raspberry Pi, first install the
required packages with <code>sudo apt-get install deluged deluge-console</code>. Once they
finish installing, we&rsquo;ll need to set some basic options before doing the rest
from a client. First, you should start the daemon with <code>deluged</code>. Once it starts
up, set a username and password you will use to login from the client with the
following commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir -p ~/.config/deluge
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;&lt;username&gt;:&lt;password&gt;:10&quot;</span> &gt;&gt; ~/.config/deluge
</span></code></pre></td></tr></table></div></figure>


<p>The number <code>10</code> at the end means that you will have full control over the daemon
from the client, username and password should be self explanatory. One word of
warning though, the password will remain in that file as plaintext, so if you&rsquo;re
the type that worries about security you should probably choose a password that
you don&rsquo;t normally use.</p>

<p>Next, we want to ensure that remote access is in fact enabled. Run the command
<code>deluge-console</code>, and once the interface loads enter the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>config -s allow_remote True
</span></code></pre></td></tr></table></div></figure>


<p>You can then exit the console with <code>exit</code>, and restart the daemon with the new
config with the commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pkill deluged
</span><span class='line'>deluged
</span></code></pre></td></tr></table></div></figure>


<p>So now we have a torrent daemon running that accepts remote access from client
programs. To configure it the rest of the way, you <em>could</em> edit the (rather
unfriendly) config file by hand, but I found it much easier to set the options I
wanted by using the GUI on the client program. If you haven&rsquo;t already, you
should install deluge on your local machine via whatever package manager your
disto uses, or if you&rsquo;re on Windows or Mac, download the appropriate
<a href="http://dev.deluge-torrent.org/wiki/Download">installer</a>. Once you have it
installed, start the program and open <code>Preferences=&gt;Interface</code>, and ensure that
Classic Mode is unchecked. Restart the program and this time click on
<code>Connection Manager=&gt;Add</code>, enter the servers IP address and the username and
password you set earlier, and click <code>Add</code> and <code>Connect</code>. Once a connection is
established you can click on <code>Preferences</code> once again, only now it will change
the settings on the server running on the Pi.</p>

<p>From here on out the configuration of the Deluge server via the GUI is pretty
straight forward, but there are some suggestions I would give on where to start.
The first thing that should be changed is the default download location in the
<code>Downloads</code> tab. If you followed my guide above to setup an external hard drive
for NAS, I&rsquo;d recommend setting it to somewhere in that directory so that you can
access the downloaded files over the network. If not, just be sure to set the
location to somewhere with enough space to handle the downloads, preferably an
external drive of some sort.  You can also set a separate
directory to move the completed downloads to if you want to keep in progress and
finished downloads separate. Finally, whether using a NAS setup or not, I would
advise setting a directory to load .torrents from. If you are mounting a
directory as NAS, then you can create a subdirectory and have Deluge watch it
for torrents, so that all you need to do is drop them there from any other
device to initiate a download. If you&rsquo;re not using NAS, simply set it to
anywhere that is convenient, and it will still come in handy as a way to add
torrents directly on the Pi by <code>wget</code>ing the torrent files into that directory.</p>

<p><a href="#top">Back to top ↑</a></p>

<h3>Conclusion</h3>

<p>So now we have a Raspberry Pi that will create a reverse SSH tunnel to be
accessed from anywhere, provide network attached storage to all local devices,
and act as a central torrent server. Not bad for $35 + spare parts. If you have
any questions about any of these steps or have a cool trick of your own, leave a
comment bellow and I&rsquo;ll see about adding it to these tips. Otherwise, enjoy your
new mini dorm command center.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Dotfiles With Git]]></title>
    <link href="http://jmatth.com/blog/2012/10/27/dots-pt1/"/>
    <updated>2012-10-27T22:30:00-04:00</updated>
    <id>http://jmatth.com/blog/2012/10/27/dots-pt1</id>
    <content type="html"><![CDATA[<h3>All the cool kids are doing it.</h3>

<p>As a Linux user, one of the great things is how much everything on the system
can be customized exactly to your liking, and how easy it is to do so through
(usually) simple plain-text config files. One not-so-great thing is having to
copy those files around whenever you get access to a new machine and want all
your nice customizations on there too, or even worse, loosing all those careful
tweaks in a system reinstall.</p>

<p>Fortunately there is a better way. By using git to manage all your
configuration files (&ldquo;dotfiles&rdquo;, since they are usually prefixed with a <code>.</code>),
you can store all your settings remotely and easily sync them across any number
of computers. Even if you&rsquo;re fairly new to Linux and don&rsquo;t have much in the way
of dotfiles, keeping whatever you do have in git is still a good idea because 1)
Even if you don&rsquo;t have a lot now, you will eventually so might as well start
early, and 2) No matter how little configuration you might have, having to
retype it after a system reinstall is never fun, so keeping it in a safe place
just makes sense. So with that in mind, lets get started.</p>

<!-- more -->


<p>Before we start, I&rsquo;m assuming you have git installed and a github account ready to
go. If not, then you should register for a free account
<a href="https://github.com/signup/free">here</a>. It&rsquo;s a great website for hosting your
git repos, and if you&rsquo;re a student you can even get a few free private repos to
store all your secrets. Once you create an account, just run through the super
easy instructions to get git set up on your machine.</p>

<p>To get started, go to your github and create a new repo name <em>dotfiles</em>, and
clone it to your local machine. Now to start out, lets just add one file to the
repo. If you have a bashrc, then I&rsquo;d recommend starting with that. Copy the file
<code>.bashrc</code> from your home directory to <code>dotfiles/bashrc</code>. I&rsquo;m omitting the <code>.</code>
on purpose in the repo, because having it hidden in a repository used for
nothing but dotfiles doesn&rsquo;t make much sense. Once it&rsquo;s there you can add to the
repo with <code>git add bashrc</code> and <code>git commit -m</code>adding bashrc.`. Finally, push
the changes to github to access your bashrc from anywhere with an internet
connection.</p>

<p>So now you can take any other configuration files you have, add them to the
repo, and pull them down to any other computers you use. Of course, now you have
to copy all your files back into your home directory each time you pull down new
changes. That, or you could use a shell script to create symlinks for each
file so that whenever you run <code>git pull</code> you don&rsquo;t have to do any extra work.
Just copy or download the following script into a file called <code>link.sh</code>, make it executable,
and add it to the repo. Then whenever you add new files, just run <code>./link.sh</code>
inside the repo to create matching symlinks in your home directory.</p>

<figure class='code'><figcaption><span>Create Dotfiles Symlinks (link.sh)</span> <a href='http://jmatth.com/downloads/code/dots-pt1/link.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Ignore certain files</span>
</span><span class='line'><span class="nv">IGNORE</span><span class="o">=</span><span class="s2">&quot;link\.sh&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Get current directory</span>
</span><span class='line'><span class="nv">DIR</span><span class="o">=</span><span class="s2">&quot;$( cd &quot;</span><span class="k">$(</span> dirname <span class="s2">&quot;${BASH_SOURCE[0]}&quot;</span> <span class="k">)</span><span class="s2">&quot; &amp;&amp; pwd )&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -e <span class="s2">&quot;\e[1;35mSymlinking config files:\e[m&quot;</span>
</span><span class='line'><span class="k">for </span>file in <span class="k">$(</span>git ls-files | egrep -v <span class="nv">$IGNORE</span><span class="k">)</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  if</span> <span class="o">[</span> <span class="s2">&quot;$(readlink ~/.$file)&quot;</span> !<span class="o">=</span> <span class="s2">&quot;$DIR/$file&quot;</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> <span class="nv">$file</span>
</span><span class='line'>      <span class="k">if </span><span class="nb">test</span> ! -d <span class="sb">`</span>dirname ~/.<span class="nv">$file</span><span class="sb">`</span>
</span><span class='line'>      <span class="k">then</span>
</span><span class='line'><span class="k">          </span>mkdir -p <span class="sb">`</span>dirname ~/.<span class="nv">$file</span><span class="sb">`</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">      if </span><span class="nb">test</span> -h ~/.<span class="nv">$file</span>
</span><span class='line'>      <span class="k">then</span>
</span><span class='line'><span class="k">          </span>unlink ~/.<span class="nv">$file</span>
</span><span class='line'>      <span class="k">fi</span>
</span><span class='line'><span class="k">      </span>rm -rf ~/.<span class="nv">$file</span> 2&gt;&amp;1 &gt;/dev/null
</span><span class='line'>      ln -sf <span class="nv">$DIR</span>/<span class="nv">$file</span> ~/.<span class="nv">$file</span>
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
